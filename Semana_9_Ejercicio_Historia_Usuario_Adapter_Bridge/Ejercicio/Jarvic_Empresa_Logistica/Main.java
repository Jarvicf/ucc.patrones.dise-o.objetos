package Semana_9_Ejercicio_Historia_Usuario_Adapter_Bridge.Ejercicio.Jarvic_Empresa_Logistica;

    //Interface
    interface GPS{
        String obtenerUbicacion(String stUbicacion);
        String obtenerEstado(String stEstado);
    }

    //Interface
    interface Plataforma {
        void mostrarDatos(String stUbicacion, String stEstado);
    }    
       
    //Garmin Api
     class GarminGPS {
        public String getPosicion(String stUbicacion) {
            return "Garmin: Ubicaci√≠on es: " + stUbicacion;
        }

        public String getEstado(String stEstado){
            return "Garmin: Estado es: " + stEstado;
        }
    }
    
    // TomTom Api
    class TomTomGPS {
        public String getPosicion(String stUbicacion) {
            return "TomTom: Ubicaci√≠on es:" + stUbicacion;
        }
        public String getEstado(String stEstado){
            return "TomTom: Estado es: " + stEstado;
        }
    }
    
    // Huawei API
    class HuaweiGPS {
        public String getPosicion(String stUbicacion) {
            return "Huawei: Ubicaci√≠on es:" + stUbicacion;
        }
        public String getEstado(String stEstado){
            return "Huawei: Estado es: " + stEstado;
        }
    }
   
    //adaptador Garmin
    class GarminAdapter implements GPS{
        private GarminGPS dispositivo;

        //Constructor
        public GarminAdapter(GarminGPS dispositivo) {
            this.dispositivo = dispositivo;
        }

        //Metodos
        public String obtenerUbicacion(String stUbicacion) {
            return dispositivo.getPosicion(stUbicacion);
        }

        public String obtenerEstado(String stEstado){
            return dispositivo.getEstado(stEstado);
        }
    }

     //adaptador TomTom
     class TomTomAdapter implements GPS{
        private TomTomGPS dispositivo;

        //Constructor
        public TomTomAdapter(TomTomGPS dispositivo) {
            this.dispositivo = dispositivo;
        }

        //Metodos
        public String obtenerUbicacion(String stUbicaci√≠on) {
            return dispositivo.getPosicion(stUbicaci√≠on);
        }

        public String obtenerEstado(String stEstado){
            return dispositivo.getEstado(stEstado);
        }
    }

     //adaptador Huawei
     class HuaweiAdapter implements GPS{
        private HuaweiGPS dispositivo;

        //Constructor
        public HuaweiAdapter(HuaweiGPS dispositivo) {
            this.dispositivo = dispositivo;
        }

        //Metodos
        public String obtenerUbicacion(String stUbicacion) {
            return dispositivo.getPosicion(stUbicacion);
        }

        public String obtenerEstado(String stEstado){
            return dispositivo.getEstado(stEstado);
        }
    }

    //Implementacines
    class VisualizacionMovil implements Plataforma{

        @Override
        public void mostrarDatos(String stUbicacion, String stEstado) {
        System.out.println("üì±App M√≥vilüì±");
        System.out.println("Ubicaci√≥n: " + stUbicacion);
        System.out.println("Estado: " + stEstado);
        }
        
    } 

    class VisualizacionEscritorio  implements Plataforma{

        @Override
        public void mostrarDatos(String stUbicacion, String stEstado) {
            System.out.println("üñ•Ô∏è Aplicaci√≥n de Escritorio üñ•Ô∏è");
            System.out.println("Ubicaci√≥n: " + stUbicacion);
            System.out.println("Estado: " + stEstado);
        }

    }

    //Abstracci√≥n 
    abstract class RastreadorVehiculo {
        protected GPS gps;
        protected Plataforma plataforma;

        public RastreadorVehiculo(GPS gps, Plataforma plataforma) {
            this.gps = gps;
            this.plataforma = plataforma;
        }
    
        public abstract void mostrarDatos(String ubicacion, String estado);
    }

    //Abstracci√≥n
    class RastreadorVehiculoGPS extends RastreadorVehiculo {

        public RastreadorVehiculoGPS(GPS gps, Plataforma plataforma) {
            super(gps, plataforma);
        }       

        @Override
        public void mostrarDatos(String ubicacion, String estado) {
        String ubicacionStr = gps.obtenerUbicacion(ubicacion);
        String estadoStr = gps.obtenerEstado(estado);
        plataforma.mostrarDatos(ubicacionStr, estadoStr);
        }
    }
    
    public class Main 
{
    public static void main(String[] args) 
    {
        GetIdentidad getIdentidad = new GetIdentidad("Patr√≥n Adapter y Bridge","Como ingeniero de integraci√≥n en una empresa de log√≠stica nacional, necesito que nuestro sistema de rastreo de veh√≠culos sea capaz de integrarse con m√∫ltiples dispositivos GPS de diferentes marcas (Garmin, TomTom, Huawei), cada uno con su propia API, para mostrar de forma unificada los datos de ubicaci√≥n y estado del veh√≠culo en una aplicaci√≥n m√≥vil y de escritorio. Adem√°s, quiero poder modificar la interfaz gr√°fica del panel de rastreo dependiendo de si el usuario accede desde escritorio o desde el celular, sin tener que cambiar toda la l√≥gica del sistema.");
        getIdentidad.getEncabezado();

        GPS gpsGarmin = new GarminAdapter(new GarminGPS());
        GPS gpsTomTom = new TomTomAdapter(new TomTomGPS());
        GPS gpsHuawei = new HuaweiAdapter(new HuaweiGPS());

        // Interfaces gr√°ficas
        Plataforma appMovil = new VisualizacionMovil();
        Plataforma appEscritorio = new VisualizacionEscritorio();

        // Rastreador con Bridge (combinaci√≥n libre)
        RastreadorVehiculo rastreadorGarminMovil = new RastreadorVehiculoGPS(gpsGarmin, appMovil);
        RastreadorVehiculo rastreadorTomTomEscritorio = new RastreadorVehiculoGPS(gpsTomTom, appEscritorio);
        RastreadorVehiculo rastreadorHuaweiMovil = new RastreadorVehiculoGPS(gpsHuawei, appEscritorio);

        // Mostrar resultados con datos personalizados
        rastreadorGarminMovil.mostrarDatos("Lat: 4.7110, Lon: -74.0721", "Quiero");
        rastreadorTomTomEscritorio.mostrarDatos("Lat: 3.4516, Lon: -76.5320", "En movimiento");
        rastreadorHuaweiMovil.mostrarDatos("Lat: 4.7110, Lon: -74.0721", "En movimiento");


        /*//Garmin
        System.out.println(gpsGarmin.obtenerUbicacion("Lat: 4.7110, Lon: -74.0721"));
        System.out.println(gpsGarmin.obtenerUbicacion("Quiero"));
        //TomTom
        System.out.println(gpsTomTom.obtenerUbicacion(" Lat: 3.4516, Lon: -76.5320"));
        System.out.println(gpsTomTom.obtenerEstado("En movimiento"));
        //Huawei
        System.out.println(gpsHuawei.obtenerUbicacion("Lat: 4.7110, Lon: -74.0721"));
        System.out.println(gpsHuawei.obtenerEstado("En movimiento"));*/

        //Auditoria
        getIdentidad.getNombre();
        getIdentidad.getPatron();
    }    
}
